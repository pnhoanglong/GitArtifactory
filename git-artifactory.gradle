//Credit to https://github.com/JeroenMols/GitAsMaven

// Config git repo and branch used as artifactory
ext{
    gitUserId = "zalora"
    gitRepo = "android-libs"
    gitArtifactoryBranch = "releases"
}

apply plugin: 'maven'

def gitArtifactoryUrl = "https://raw.githubusercontent.com/${gitUserId}/${gitRepo}/${gitArtifactoryBranch}/"
repositories {
    maven { url "https://raw.github.com/synergian/wagon-git/releases" }

    maven {
        url = gitArtifactoryUrl
        credentials {
            username gitDevUserId
            password gitDevPersonalToken
        }
        authentication {
            basic BasicAuthentication
        }
    }
}

configurations {
    deployLibrary
}

dependencies {
    deployLibrary "ar.com.synergian:wagon-git:0.3.0"
}




def artifactGroup =  project.properties['artifactGroup'] ?: ""
def artifactName = project.properties['artifactName'] ?: ""
def artifactVersion = project.properties['artifactVersion'] ?: ""
def aarExtension = 'aar'

task lookForArtifact {
    doLast {
        def artifactFullName = "$artifactName-$artifactVersion.$aarExtension"
        def artifactPath = artifactGroup.replace(".", "/") + "/" + artifactName + "/" + artifactVersion + "/" + artifactFullName

        def artifactUrl = gitArtifactoryUrl + artifactPath

        println("")
        println("Checking if artifact already exists: " + artifactName)
        println("at URL: " + artifactUrl)

        def artifactExists = urlExists(artifactUrl)
        println(artifactExists ? "existing artifact found" : "no existing artifact found")
        println("")

        if (urlExists(artifactUrl)) {
            throw new RuntimeException("Artifact with version " + artifactVersion + " already exist - not executing uploadArchives")
        }
        return true
    }
}

uploadArchives.dependsOn lookForArtifact
uploadArchives {

    repositories.mavenDeployer {
        configuration = configurations.deployLibrary
        repository(url: "git:${gitArtifactoryBranch}://git@github.com:${gitUserId}/${gitRepo}.git")

        pom.project {
            groupId artifactGroup
            artifactId artifactName
            version artifactVersion
            packaging aarExtension
        }
    }
}

def urlExists(String url) {

    try {
        def connection = (HttpURLConnection) new URL(url).openConnection()

        connection.setRequestProperty("Authorization", "Basic " + getBase64EncodedCredentials())
        connection.setConnectTimeout(10000)
        connection.setReadTimeout(10000)
        connection.setRequestMethod("HEAD")

        def responseCode = connection.getResponseCode()
        println("responseCode: " + responseCode)

        return (200 == responseCode)
    } catch (IOException ignored) {
        return false
    }
}

def getBase64EncodedCredentials() {
    def s = gitDevUserId + ":" + gitDevPersonalToken
    return s.bytes.encodeBase64().toString()
}


//TODO: support javadocs and source for kotlin in next version
//task androidJavadocs(type: Javadoc) {
//    failOnError false
//    source = android.sourceSets.main.java.sourceFiles
//}
//
//task androidSourcesJar(type: Jar) {
//    classifier = 'sources'
//    from android.sourceSets.main.java.sourceFiles
//}
//
//task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//    classifier = 'javadoc'
//    from androidJavadocs.destinationDir
//}
//
//artifacts {
//    archives androidSourcesJar
//    archives androidJavadocsJar
//}
